class DSU{
public:
    vector<int> parent;
    vector<int> size;

    DSU(int n){
        parent.resize(n);
        size.resize(n, 1);

        for(int i = 0; i<n; i++) parent[i] = i;
    }

    int findPar(int node){
        // while(parent[node] != node){
        //     node = parent[node];
        // }     
        // return node;

        //path compression
        if(parent[node] == node) return node;

        return parent[node] = findPar(parent[node]);
    }

    void performUnion(int u, int v){
        int parU = findPar(u);
        int parY = findPar(v);

        if(parU == parY) return;

        //size ke basis pr 
        if(size[parU] > size[parY]){
            parent[parY] = parU; 
            size[parU] += size[parY];
        }
        else{
            parent[parU] = parY; 
            size[parY] += size[parU];
        }
    }
};

class Solution {
public:
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        DSU dsu(n);

        unordered_map<int, int> mp; //root->edges

        for(auto it:edges){
            dsu.performUnion(it[0], it[1]);
        }

        for(auto it:edges){
            int root = dsu.findPar(it[0]); //kisi ka dekhlo both connceted parent same
            mp[root]++; //root correponding edges++
        }

        int component = 0;
        //check for complete
        for(int i = 0; i<n; i++){
            //connected find kaise hoga agr node == parent
            int parent = dsu.findPar(i);

            if(i == parent){
                int vertices = dsu.size[i];
                if((vertices*(vertices-1))/2 == mp[i]) component++;
            }
        }
        return component;
    }
};
